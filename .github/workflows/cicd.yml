name: CI/CD

on:
  push:
    branches: main
    paths-ignore:
      - '.devcontainer/**'
      - '.github/dependabot.yml'
      - '.gitignore'
      - 'LICENSE*'
      - 'README.md'

env:
  REGISTRY: ghcr.io  # GitHub Container Registry
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: Lint codebase
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'Lint codebase [skip ci]'

  build-test:
    name: Build and test
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: Build the static website
        env:
          BASE_PATH: '/${{ github.event.repository.name }}'
        run: npm run build

      - name: Execute tests
        run: npm test

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'build/'

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs:
      - lint
      - build-test
    outputs:
      digest: ${{ steps.build-push.outputs.digest }}

    permissions:
      contents: read
      packages: write
    concurrency: github-packages
    environment:
      name: github-packages
      url: https://github.com/corentin-regent/portfolio/pkgs/container/portfolio

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}

  lighthouse:
    name: Run Lighthouse audits
    runs-on: ubuntu-latest
    needs:
      - docker

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Docker image
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.docker.outputs.digest }}

      - name: Generate URLs to audit
        id: urls
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const { readdirSync } = require('fs');
            const availableLanguages = require('./src/stores/language/available.js');
            const defaultLanguage = require('./src/stores/language/default.js');

            const allUrls = readdirSync('src/routes/', { recursive: true })
              .filter(path => path.endsWith('+page.svelte'))
              .map(path => path.replace('+page.svelte', ''))
              .flatMap(route =>
                  route.includes('[[language=language]]')
                  ? availableLanguages.map(language => route.replace(
                    '[[language=language]]/',
                    language === defaultLanguage ? '' : language + '/'
                  ))
                  : [route]
              )
              .map(route => 'http://localhost/' + route)
              .join('\n')

            core.setOutput('urls', allUrls);

      - name: Run Lighthouse
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: './lighthouserc.js'
          uploadArtifacts: true
          urls: |
            ${{ steps.urls.outputs.urls }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs:
      - lighthouse

    permissions:
      pages: write
      id-token: write

    concurrency: github-pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
